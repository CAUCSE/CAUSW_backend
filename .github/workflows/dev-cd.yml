name: Caucse DEV Java CI/DE with Gradle(dev branch)

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  build:
    name: Build in Github Actions
    runs-on: ubuntu-22.04

    steps:
      # 작업 엑세스 가능하게 $GITHUB_WORKSPACE에서 저장소를 체크아웃
      - name: Checkout branch
        uses: actions/checkout@v3

      # java 버전 세팅(JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # git ignore한 yml 파일들 github secret에서 복사해 오기
      - name: Copy secret
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE_DEV }}
          APPLICATION_DEV_FILE: ${{ secrets.APPLICATION_DEV }}
          DIR: ./src/main/resources

          APPLICATION_FILE_NAME: application.yml
          APPLICATION_DEV_FILE_NAME: application-dev.yml
        run: |
          touch $DIR/$APPLICATION_FILE_NAME
          touch $DIR/$APPLICATION_DEV_FILE_NAME
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME
          echo "$APPLICATION_DEV_FILE" > $DIR/$APPLICATION_DEV_FILE_NAME

      # 파이어베이스 key 파일 추가
      - name: Add firebase key
        env:
          FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
          FIREBASE_KEY_FILENAME: dongnae_firebase_key.json
          DIR: ./src/main/resources
        run: |
          touch $DIR/$FIREBASE_KEY_FILENAME
          echo "$FIREBASE_KEY" > $DIR/$FIREBASE_KEY_FILENAME

      # .env.dev 파일 추가
      - name: Copy .env.dev from secret
        env:
          ENV_DEV: ${{ secrets.ENV_DEV }}
        run: |
          cat <<EOF > .env.dev
          $ENV_DEV
          EOF

      # gradlew 실행 권한 부여
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
        shell: bash

      # Flyway 마이그레이션
      - name: Run Flyway migration
        run: ./gradlew flywayMigrate -Penv=dev

      # Build -> jar 파일 생성
      - name: Build with Gradle
        run: ./gradlew clean build -x test
        shell: bash

      - name: Upload Build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/libs/*.jar


  deploy:
    name: CD with SSH
    needs: build
    runs-on: ubuntu-22.04

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # JAR 파일을 EC2에 배포하는 step
      - name: SCP JAR to EC2
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          source: "*.jar"
          target: "/home/ubuntu/app"

      # 전체 프로젝트 코드 Github Actions에서 어떻게 Build 되고, 업로드 될 지 Debugging 원할 시 주석 해제
      #      - name: Upload project code
      #        uses: appleboy/scp-action@master
      #        with:
      #          key: ${{ secrets.EC2_KEY_DEV }}
      #          host: ${{ secrets.EC2_HOST_DEV }}
      #          username: ${{ secrets.EC2_USER_DEV }}
      #          target: /home/ubuntu/app/spring_source
      #          source: .

      # Redis Server 구동
      - name: Start redis-server
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          script: |
            sudo systemctl start redis-server

      # EC2에 SSH로 배포 커맨드를 입력하는 step
      - name: Deploy SSH
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          # 기존 실행 중인 서버 종료 후 jar 파일 실행
          script: |
            sudo fuser -k -n tcp 8080
            sleep 15
            sudo nohup java -jar /home/ubuntu/app/*.jar > ./nohup.out 2>&1 &

      - name: Discord Notify (Always)
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_DEPLOY_WEBHOOK_URL_DEV }}

          # ✅ status 자동 감지
          status: ${{ job.status }}

          # ✅ content: 실패 시 역할 멘션 포함
          content: >-
            ${{ job.status == 'success' &&
                format('`[{0}]` 🎉 배포가 성공적으로 완료됐어요!', github.ref_name)
            || format('`[{0}]` 🚨 배포 실패! <@&{1}> 확인해주세요.', github.ref_name, secrets.DISCORD_BACKEND_ROLE_ID) }}

          # ✅ title: 브랜치 prefix + 이모지 포함
          title: >-
            ${{ job.status == 'success' &&
                format('✅ [{0}] 배포 성공', github.ref_name)
            || format('❌ [{0}] 배포 실패', github.ref_name) }}

          # ✅ Embed description
          description: |
            🛠 브랜치: `${{ github.ref_name }}`
            🔖 커밋: `${{ github.sha }}`
            🙋 작성자: `${{ github.actor }}`
            🔗 [깃허브 액션 로그 보기](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          # ✅ 상태별 색상
          color: ${{ job.status == 'success' && '0x00ff00' || '0xff0000' }}

          # ✅ 봇 이름 커스터마이징
          username: "🚀 배포 봇"