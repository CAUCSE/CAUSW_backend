name: Caucse DEV Java CI/DE with Gradle(dev branch)

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  app-main-build:
    name: Build & Deploy app-main Module in Github Actions
    runs-on: ubuntu-22.04

    steps:
      # 작업 엑세스 가능하게 $GITHUB_WORKSPACE에서 저장소를 체크아웃
      - name: Checkout branch
        uses: actions/checkout@v4

      # JDK & Gradle 설정
      - name: Setup JDK and Gradle
        uses: ./.github/actions/setup-jdk-gradle

      # .gitignore된 yml 파일들 github secret에서 복사
      - name: Copy secret for app-main
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE_DEV }}
          APPLICATION_DEV_FILE: ${{ secrets.APPLICATION_DEV }}
          DIR: ./app-main/src/main/resources
          APPLICATION_FILE_NAME: application.yml
          APPLICATION_DEV_FILE_NAME: application-dev.yml
        run: |
          touch $DIR/$APPLICATION_FILE_NAME
          touch $DIR/$APPLICATION_DEV_FILE_NAME
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME
          echo "$APPLICATION_DEV_FILE" > $DIR/$APPLICATION_DEV_FILE_NAME

      # 파이어베이스 key 파일 추가
      - name: Add firebase key
        env:
          FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
          FIREBASE_KEY_FILENAME: dongnae_firebase_key.json
          DIR: ./app-main/src/main/resources
        run: |
          touch $DIR/$FIREBASE_KEY_FILENAME
          echo "$FIREBASE_KEY" > $DIR/$FIREBASE_KEY_FILENAME

      # .env.dev 파일 추가
      - name: Copy .env.dev from secret
        env:
          ENV_DEV: ${{ secrets.ENV_DEV }}
        run: |
          cat <<EOF > .env.dev
          $ENV_DEV
          EOF

      # Flyway 마이그레이션
      - name: Run Flyway migration
        run: ./gradlew flywayMigrate -Penv=dev

      # Build -> jar 파일 생성
      - name: Build app-main module
        run: ./gradlew clean :app-main:bootJar -x test

      - name: Upload Build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-main-artifact
          path: |
            app-main/build/libs/*.jar


  app-main-deploy:
    name: CD app-main Module with SSH
    needs: app-main-build
    runs-on: ubuntu-22.04

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-main-artifact
          path: app-main/build/libs/

      # app-main 전용 디렉토리 생성
      - name: Ensure app-main folder exists on EC2
        if: github.actor != 'nektos/act'
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          script: |
            mkdir -p /home/ubuntu/app/app-main

      # app-main JAR 파일 EC2에 전송
      - name: SCP app-main JAR to EC2
        if: github.actor != 'nektos/act'
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          source: "app-main/build/libs/*.jar"
          target: "/home/ubuntu/app/app-main"

      #      # Github Actions 빌드, 업로드 디버깅 용
      #      - name: Upload project code (app-main)
      #        uses: appleboy/scp-action@master
      #        with:
      #          key: ${{ secrets.EC2_KEY_DEV }}
      #          host: ${{ secrets.EC2_HOST_DEV }}
      #          username: ${{ secrets.EC2_USER_DEV }}
      #          target: /home/ubuntu/app/spring_source/app-main
      #          source: app-main/**

      # Redis Server 구동
      - name: Start redis-server
        if: github.actor != 'nektos/act'
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          script: |
            sudo systemctl start redis-server

      # 기존 서버 종료 및 app-main JAR 실행
      - name: Deploy app-main
        if: github.actor != 'nektos/act'
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          script: |
            sudo fuser -k -n tcp 8080 || true
            sleep 15
            APP_MAIN_JAR=$(ls -t /home/ubuntu/app/app-main/*.jar | head -n 1)
            sudo mkdir -p /var/log/spring-boot/app-main
            sudo nohup java -DLOG_DIR=/var/log/spring-boot/app-main -jar "$APP_MAIN_JAR" 1>/dev/null 2>&1 & 


  app-chat-build:
    name: Build & Deploy app-chat Module in Github Actions
    runs-on: ubuntu-22.04

    steps:
      # 작업 엑세스 가능하게 $GITHUB_WORKSPACE에서 저장소를 체크아웃
      - name: Checkout branch
        uses: actions/checkout@v4

      # JDK & Gradle 설정
      - name: Setup JDK and Gradle
        uses: ./.github/actions/setup-jdk-gradle

      # .gitignore된 yml 파일들 github secret에서 복사
      - name: Copy secret for app-chat
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE_DEV }}
          APPLICATION_DEV_FILE: ${{ secrets.APPLICATION_DEV_APP_CHAT }}
          DIR: ./app-chat/src/main/resources
          APPLICATION_FILE_NAME: application.yml
          APPLICATION_DEV_FILE_NAME: application-dev.yml
        run: |
          touch $DIR/$APPLICATION_FILE_NAME
          touch $DIR/$APPLICATION_DEV_FILE_NAME
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME
          echo "$APPLICATION_DEV_FILE" > $DIR/$APPLICATION_DEV_FILE_NAME

      # Build -> jar 파일 생성
      - name: Build app-chat module
        run: ./gradlew clean :app-chat:bootJar -x test

      - name: Upload Build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-chat-artifact
          path: |
            app-chat/build/libs/*.jar


  app-chat-deploy:
    name: CD app-chat Module with SSH
    needs: app-chat-build
    runs-on: ubuntu-22.04

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-chat-artifact
          path: app-chat/build/libs/

      # app-chat 전용 디렉토리 생성
      - name: Ensure app-chat folder exists on EC2
        if: github.actor != 'nektos/act'
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          script: |
            mkdir -p /home/ubuntu/app/app-chat

      # app-chat JAR 파일 EC2에 전송
      - name: SCP app-chat JAR to EC2
        if: github.actor != 'nektos/act'
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          source: "app-chat/build/libs/*.jar"
          target: "/home/ubuntu/app/app-chat"

      #    # Github Actions 빌드, 업로드 디버깅 용
      #    - name: Upload project code (app-chat)
      #      uses: appleboy/scp-action@master
      #      with:
      #        key: ${{ secrets.EC2_KEY_DEV }}
      #        host: ${{ secrets.EC2_HOST_DEV }}
      #        username: ${{ secrets.EC2_USER_DEV }}
      #        target: /home/ubuntu/app/spring_source/app-chat
      #        source: app-chat/**

      # 기존 서버 종료 및 app-chat JAR 실행
      - name: Deploy app-chat
        if: github.actor != 'nektos/act'
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          script: |
            sudo fuser -k -n tcp 8081 || true
            sleep 15
            APP_CHAT_JAR=$(ls -t /home/ubuntu/app/app-chat/*.jar | head -n 1)
            sudo mkdir -p /var/log/spring-boot/app-chat
            sudo nohup java -DLOG_DIR=/var/log/spring-boot/app-chat -jar "$APP_CHAT_JAR" 1>/dev/null 2>&1 & 


  notify:
    name: Discord Notify
    needs: [ app-main-deploy, app-chat-deploy ]
    runs-on: ubuntu-22.04
    if: always()

    steps:
      # 작업 엑세스 가능하게 $GITHUB_WORKSPACE에서 저장소를 체크아웃
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Notify Success
        if: ${{ github.actor != 'nektos/act' && needs.app-main-deploy.result == 'success' && needs.app-chat-deploy.result == 'success' }}
        uses: ./.github/actions/discord-notify
        with:
          status: success
          branch: ${{ github.ref_name }}
          sha: ${{ github.sha }}
          actor: ${{ github.actor }}
          run_id: ${{ github.run_id }}
          webhook: ${{ secrets.DISCORD_DEPLOY_WEBHOOK_URL_DEV }}
          role_id: ${{ secrets.DISCORD_BACKEND_ROLE_ID }}

      - name: Notify Failure
        if: ${{ github.actor != 'nektos/act' && (needs.app-main-deploy.result != 'success' || needs.app-chat-deploy.result != 'success') }}
        uses: ./.github/actions/discord-notify
        with:
          status: failure
          branch: ${{ github.ref_name }}
          sha: ${{ github.sha }}
          actor: ${{ github.actor }}
          run_id: ${{ github.run_id }}
          webhook: ${{ secrets.DISCORD_DEPLOY_WEBHOOK_URL_DEV }}
          role_id: ${{ secrets.DISCORD_BACKEND_ROLE_ID }}
