name: Caucse Main Java CI/DE with Gradle(main branch)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  prepare:
    name: Prepare Build in Github Actions
    runs-on: ubuntu-22.04
    outputs:
      root_changed: ${{ steps.filter.outputs.root }}
      global_changed: ${{ steps.filter.outputs.global }}
      app_main_changed: ${{ steps.filter.outputs.app_main }}
      app_chat_changed: ${{ steps.filter.outputs.app_chat }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Check which modules changed
        id: filter
        run: |
          echo "root=false" >> $GITHUB_OUTPUT
          echo "global=false" >> $GITHUB_OUTPUT
          echo "app_main=false" >> $GITHUB_OUTPUT
          echo "app_chat=false" >> $GITHUB_OUTPUT
          
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -Eq "^(build\\.gradle|settings\\.gradle|gradle/)"; then
            echo "root=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^global/"; then
            echo "global=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^app-main/"; then
            echo "app_main=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^app-chat/"; then
            echo "app_chat=true" >> $GITHUB_OUTPUT
          fi

      # global 모듈 빌드
      - name: Build global module
        run: ./gradlew clean :global:build

      # global JAR 업로드
      - name: Upload global jar
        uses: actions/upload-artifact@v4
        with:
          name: global-artifact
          path: global/build/libs/*.jar

  app-main-build:
    needs: prepare
    if: needs.prepare.outputs.root_changed == 'true' || needs.prepare.outputs.global_changed == 'true' || needs.prepare.outputs.app_main_changed == 'true'
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup JDK and Gradle
        uses: ./.github/actions/setup-jdk-gradle

      - name: Copy production secrets for app-main
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE_PROD }}
          APPLICATION_PROD_FILE: ${{ secrets.APPLICATION_PROD }}
          DIR: ./app-main/src/main/resources

          APPLICATION_FILE_NAME: application.yml
          APPLICATION_PROD_FILE_NAME: application-prod.yml
        run: |
          touch $DIR/$APPLICATION_FILE_NAME
          touch $DIR/$APPLICATION_PROD_FILE_NAME
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME
          echo "$APPLICATION_PROD_FILE" > $DIR/$APPLICATION_PROD_FILE_NAME

      - name: Add firebase key
        env:
          FIREBASE_KEY: ${{ secrets.FIREBASE_KEY }}
          FIREBASE_KEY_FILENAME: dongnae_firebase_key.json
          DIR: ./app-main/src/main/resources
        run: |
          echo "$FIREBASE_KEY" > $DIR/$FIREBASE_KEY_FILENAME

      - name: Copy .env.prod from secret
        env:
          ENV_PROD: ${{ secrets.ENV_PROD }}
        run: |
          echo "$ENV_PROD" > .env.prod

      # Build -> jar 파일 생성
      - name: Download global jar
        uses: actions/download-artifact@v4
        with:
          name: global-artifact

      - name: Build app-main
        run: ./gradlew clean :app-main:build -x test

      - name: Upload Build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            app-main/build/libs/*.jar


  app-main-deploy:
    needs: app-main-build
    runs-on: ubuntu-22.04

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # app-main 전용 디렉토리 생성
      - name: Ensure app-main folder exists on EC2
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_DEV }}
          host: ${{ secrets.EC2_HOST_DEV }}
          username: ${{ secrets.EC2_USER_DEV }}
          script: |
            mkdir -p /home/ubuntu/app/app-main

      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.EC2_KEY_PROD }}
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USER_PROD }}
          source: "app-main/build/libs/*.jar"
          target: "/home/ubuntu/app/app-main"

      # Redis Server 구동
      - name: Start redis-server
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_PROD }}
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USER_PROD }}
          script: |
            sudo systemctl start redis-server

      # 기존 서버 종료 및 app-main JAR 실행
      - name: Deploy app-main
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_PROD }}
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USER_PROD }}
          script: |
            sudo fuser -k -n tcp 8080 || true
            sleep 10
            JAR=$(ls /home/ubuntu/app/app-main/*.jar | tail -n 1)
            sudo nohup java -jar "$JAR" > /home/ubuntu/app/app-main/nohup.out 2>&1 &


  app-chat-build:
    needs: prepare
    name: Build & Deploy app-chat Module in Github Actions
    runs-on: ubuntu-22.04
    if: needs.prepare.outputs.root_changed == 'true' || needs.prepare.outputs.global_changed == 'true' || needs.prepare.outputs.app_chat_changed == 'true'

    steps:
      # 작업 엑세스 가능하게 $GITHUB_WORKSPACE에서 저장소를 체크아웃
      - name: Checkout branch
        uses: actions/checkout@v4

      # JDK & Gradle 설정
      - name: Setup JDK and Gradle
        uses: ./.github/actions/setup-jdk-gradle

      # .gitignore된 yml 파일들 github secret에서 복사
      - name: Copy production secrets for app-chat
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE_PROD }}
          APPLICATION_PROD_FILE: ${{ secrets.APPLICATION_PROD_APP_CHAT }}
          DIR: ./app-chat/src/main/resources

          APPLICATION_FILE_NAME: application.yml
          APPLICATION_PROD_FILE_NAME: application-prod.yml
        run: |
          touch $DIR/$APPLICATION_FILE_NAME
          touch $DIR/$APPLICATION_PROD_FILE_NAME
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME
          echo "$APPLICATION_PROD_FILE" > $DIR/$APPLICATION_PROD_FILE_NAME

      # Build -> jar 파일 생성
      - name: Download global jar
        uses: actions/download-artifact@v4
        with:
          name: global-artifact

      - name: Build app-chat module
        run: ./gradlew clean :app-chat:build -x test

      - name: Upload Build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            app-chat/build/libs/*.jar
  

  app-chat-deploy:
    name: CD app-chat Module with SSH
    needs: app-chat-build
    runs-on: ubuntu-22.04

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      # app-chat 전용 디렉토리 생성
      - name: Ensure app-chat folder exists on EC2
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_PROD }}
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USER_PROD }}
          script: |
            mkdir -p /home/ubuntu/app/app-chat

      # app-chat JAR 파일 EC2에 전송
      - name: SCP app-chat JAR to EC2
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.EC2_KEY_PROD }}
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USER_PROD }}
          source: "app-chat/build/libs/*.jar"
          target: "/home/ubuntu/app/app-chat"

      # 기존 서버 종료 및 app-chat JAR 실행
      - name: Deploy app-chat
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.EC2_KEY_PROD }}
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USER_PROD }}
          script: |
            sudo fuser -k -n tcp 8081 || true
            sleep 10
            APP_CHAT_JAR=$(ls /home/ubuntu/app/app-chat/*.jar | tail -n 1)
            sudo nohup java -jar "$APP_CHAT_JAR" > /home/ubuntu/app/app-chat/nohup.out 2>&1 &


  notify:
    needs: [ app-main-deploy, app-chat-deploy ]
    runs-on: ubuntu-22.04
    if: always()

    steps:
      - name: Discord Notify (Always)
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_DEPLOY_WEBHOOK_URL_MAIN }}

          # ✅ status 자동 감지
          status: ${{ job.status }}

          # ✅ content: 실패 시 역할 멘션 포함
          content: >-
            ${{ job.status == 'success' &&
                format('`[{0}]` 🎉 배포가 성공적으로 완료됐어요!', github.ref_name)
            || format('`[{0}]` 🚨 배포 실패! <@&{1}> 확인해주세요.', github.ref_name, secrets.DISCORD_BACKEND_ROLE_ID) }}

          # ✅ title: 브랜치 prefix + 이모지 포함
          title: >-
            ${{ job.status == 'success' &&
                format('✅ [{0}] 배포 성공', github.ref_name)
            || format('❌ [{0}] 배포 실패', github.ref_name) }}

          # ✅ Embed description
          description: |
            🛠 브랜치: `${{ github.ref_name }}`
            🔖 커밋: `${{ github.sha }}`
            🙋 작성자: `${{ github.actor }}`
            🔗 [깃허브 액션 로그 보기](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          # ✅ 상태별 색상
          color: ${{ job.status == 'success' && '0x00ff00' || '0xff0000' }}

          # ✅ 봇 이름 커스터마이징
          username: "🚀 배포 봇"