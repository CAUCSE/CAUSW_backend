name: 동문네트워크 백엔드 CI 테스트 자동화(dev branch PR 시 작동)

on:
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  build:
    name: Build in Github Actions
    runs-on: ubuntu-22.04

    env:
      DB_NAME: causw_test
      DB_URL: jdbc:mysql://mysql:3306/causw_test
      DB_USERNAME: root
      DB_PASSWORD: password

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: ${{ env.DB_NAME }}
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: >
          --health-cmd="mysqladmin ping -uroot -ppassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      # 작업 엑세스 가능하게 $GITHUB_WORKSPACE에서 저장소를 체크아웃
      - name: Checkout branch
        uses: actions/checkout@v4

      # java 버전 세팅(JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      # Gradle 패키지 캐싱
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # git ignore한 yml 파일들 github secret에서 복사해 오기
      - name: Copy secret
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE_DEV }}
          APPLICATION_DEV_FILE: ${{ secrets.APPLICATION_DEV }}
          DIR: ./src/main/resources

          APPLICATION_FILE_NAME: application.yml
          APPLICATION_DEV_FILE_NAME: application-dev.yml
        run: |
          touch $DIR/$APPLICATION_FILE_NAME
          touch $DIR/$APPLICATION_DEV_FILE_NAME
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME
          echo "$APPLICATION_DEV_FILE" > $DIR/$APPLICATION_DEV_FILE_NAME

      # gradlew 실행 권한 부여
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
        shell: bash

      # Flyway 마이그레이션 및 결과 요약
      - name: Run Flyway migration
        run: ./gradlew flywayMigrate -PDB_URL=$DB_URL -PDB_USERNAME=$DB_USERNAME -PDB_PASSWORD=$DB_PASSWORD

      - name: Generate Flyway info summary
        if: ${{ always() }}
        run: |
          # Flyway 마이그레이션 정보 수집 및 분석
          ./gradlew flywayInfo -PDB_URL=$DB_URL -PDB_USERNAME=$DB_USERNAME -PDB_PASSWORD=$DB_PASSWORD --console=plain > flyway-info.txt

          success_count=$(grep -c 'Success' flyway-info.txt || true)
          failed_count=$(grep -c 'Failed' flyway-info.txt || true)
          pending_count=$(grep -c 'Pending' flyway-info.txt || true)

          # Flyway 마이그레이션 결과 요약 생성
          touch flyway-summary.md
          echo "Migration Result 📦" > flyway-summary.md
          echo "---------------------------" >> flyway-summary.md
          echo "" >> flyway-summary.md
          echo "| Status  | Count |" >> flyway-summary.md
          echo "|---------|-------|" >> flyway-summary.md
          echo "| ✅ Success | $success_count |" >> flyway-summary.md
          echo "| ❌ Failed  | $failed_count |" >> flyway-summary.md
          echo "| ⏳ Pending | $pending_count |" >> flyway-summary.md
          echo "" >> flyway-summary.md

      # JPA 엔티티 매핑 결과 요약
      - name: Run JPA entity mapping test
        if: ${{ always() }}
        run: ./gradlew jpaEntityMappingTest --console=plain --no-daemon | tee /tmp/jpa-test.log || true

      - name: Generate JPA entity mapping summary
        if: ${{ always() }}
        run: |
          # JPA 엔티티 매핑 실패 로그 추출
          FAIL_LOG=$(awk '
          /> .*\(.*\) FAILED/ && found_failed == 0 {
            print "⚠️ " $0    
            getline
            print              
            found_failed=1
            next
          }
          found_failed && /Caused by:/ {
            line = $0           
            getline nextline    
            sub(/^[ \t]+/, "", nextline)  
            print line " " nextline       
          }
            ' /tmp/jpa-test.log)

          # JPA 엔티티 매핑 결과 요약 생성
          touch jpa-entity-summary.md
          echo "Schema Validation Result 🔍" > jpa-entity-summary.md
          echo "---------------------------------------" >> jpa-entity-summary.md
          echo "" >> jpa-entity-summary.md

          if [[ -n "$FAIL_LOG" ]]; then
            echo "\`\`\`" >> jpa-entity-summary.md
            echo "$FAIL_LOG" >> jpa-entity-summary.md
            echo "\`\`\`" >> jpa-entity-summary.md
          else
            echo "✅ No schema mismatches detected." >> jpa-entity-summary.md
          fi

      # Flyway & JPA 결과를 통합 및 PR 코멘트 작성
      - name: Combine Flyway & JPA summaries
        if: ${{ always() }}
        run: |
          COMMIT_SHA=${{ github.event.pull_request.head.sha }}
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${COMMIT_SHA}"

          cat flyway-summary.md > db-summary.md
          echo -e "\n\n" >> db-summary.md
          cat jpa-entity-summary.md >> db-summary.md
          echo -e "\n\nResults for commit [\`${COMMIT_SHA::7}\`]($COMMIT_URL)" >> db-summary.md
          echo -e "\n♻️ This comment has been updated with latest results." >> db-summary.md

      - name: Publish Flyway & JPA test results to pr
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ always() }}
        with:
          header: db-schema-status
          path: db-summary.md

      # 테스트 실행
      - name: Test with Gradle
        run: ./gradlew test
        shell: bash

      # 테스트 결과 출력
      - name: Publish test results to pr
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() }}
        with:
          files: ./build/test-results/test/TEST-*.xml

      # 테스트 실패 시 fail된 부분 마크
      - name: Publish check comment on test failure
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: ./build/test-results/test/TEST-*.xml