name: 동문네트워크 백엔드 CI 테스트 자동화(dev branch PR 시 작동)

on:
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  build:
    name: Build in Github Actions
    runs-on: ubuntu-22.04

    steps:
      # 작업 엑세스 가능하게 $GITHUB_WORKSPACE에서 저장소를 체크아웃
      - name: Checkout branch
        uses: actions/checkout@v4

      # java 버전 세팅(JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      # git ignore한 yml 파일들 github secret에서 복사해 오기
      - name: Copy secret
        env:
          APPLICATION_FILE: ${{ secrets.APPLICATION_PROFILE_DEV }}
          APPLICATION_DEV_FILE: ${{ secrets.APPLICATION_DEV }}
          DIR: ./src/main/resources

          APPLICATION_FILE_NAME: application.yml
          APPLICATION_DEV_FILE_NAME: application-dev.yml
        run: |
          touch $DIR/$APPLICATION_FILE_NAME
          touch $DIR/$APPLICATION_DEV_FILE_NAME
          echo "$APPLICATION_FILE" > $DIR/$APPLICATION_FILE_NAME
          echo "$APPLICATION_DEV_FILE" > $DIR/$APPLICATION_DEV_FILE_NAME

      # gradlew 실행 권한 부여
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
        shell: bash

      # .env.test 파일 생성
      - name: Create .env.test file
        run: |
          cat <<EOF > .env.test
          DB_NAME=causw_test
          DB_USERNAME=root
          DB_PASSWORD=password
          DB_URL=jdbc:mysql://localhost:3306/causw_test
          EOF

      # MySQL Docker 컨테이너 실행 대기
      - name: Start MySQL container
        run: |
          source .env.test
          docker run --name test-mysql \
            -e MYSQL_DATABASE=$DB_NAME \
            -e MYSQL_ROOT_PASSWORD=$DB_PASSWORD \
            -p 3306:3306 \
            -d mysql:8

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            nc -z localhost 3306 && echo "MySQL is up" && exit 0
            echo "Waiting for MySQL..."
            sleep 1
          done
          echo "MySQL did not start in time" && exit 1

      # Flyway 마이그레이션 실행
      - name: Run Flyway migration
        run: |
          ./gradlew flywayMigrate -Penv=test
          ./gradlew flywayInfo -Penv=test --console=plain > flyway-info.txt

      - name: Parse Flyway info and create summary
        id: flyway-summary
        run: |
          success_count=$(grep -c 'Success' flyway-info.txt || true)
          failed_count=$(grep -c 'Failed' flyway-info.txt || true)
          pending_count=$(grep -c 'Pending' flyway-info.txt || true)

          summary="### Flyway Migration Summary 📦\n"
          summary+="| Status  | Count |\n"
          summary+="|---------|-------|\n"
          summary+="| ✅ Success | $success_count |\n"
          summary+="| ❌ Failed  | $failed_count |\n"
          summary+="| ⏳ Pending | $pending_count |\n"

          echo "$summary" > flyway-summary.md
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment Flyway status on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: flyway-status
          path: flyway-summary.md

      # JPA 엔티티와 DB 스키마 일치 검증
      - name: 빌드 및 JPA 스키마 검증 실행
        run: ./gradlew jpaEntityMappingTest --console=plain --no-daemon

      # 테스트 실행
      - name: Test with Gradle
        run: ./gradlew test
        shell: bash

      # 테스트 결과 출력
      - name: Publish test results to pr
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() }}
        with:
          files: ./build/test-results/test/TEST-*.xml

      # 테스트 실패 시 fail된 부분 마크
      - name: Publish check comment on test failure
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: ./build/test-results/test/TEST-*.xml
