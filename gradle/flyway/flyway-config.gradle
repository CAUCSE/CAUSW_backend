// flyway-config.gradle

// .env.* 파일이 없는 경우 Flyway 설정 생략
def hasAnyEnv = file('.').listFiles()?.any { it.name == '.env' || it.name.matches(/\.env\..+/) }

if (!hasAnyEnv) {
    logger.lifecycle(".env.* 파일이 존재하지 않아 flyway 플러그인 설정을 생략합니다.")
    return
}

// 1. 프로필 지정
def env = project.hasProperty('env') ? project.property('env') : 'local'

// 2. .env.local 파일 파싱
def loadEnvFile(String env) {
    def envFile = file(".env.${env}")
    if (!envFile.exists()) {
        throw new GradleException(".env.${env} 파일이 존재하지 않습니다.")
    }
    envFile.eachLine { line ->
        def trimmedLine = line.trim()
        if (!trimmedLine || trimmedLine.startsWith('#')) return

        def (key, value) = line.split('=', 2)
        if (key && value) {
            project.ext.set(key.trim(), value.trim())
        }
    }
}

loadEnvFile(env)

// 3. project.ext 에서 환경변수 조회, 없는 경우 flyway 설정 생략
if (!(project.ext.has("DB_URL") && project.ext.has("DB_USERNAME") && project.ext.has("DB_PASSWORD"))) {
    logger.lifecycle("DB 설정값이 누락되어 flyway 설정을 생략합니다. env='${env}'")
    return
}

def dbUrl = project.ext.get("DB_URL")
def dbUsername = project.ext.get("DB_USERNAME")
def dbPassword = project.ext.get("DB_PASSWORD")

// 4. Flyway 설정
flyway {
    url = dbUrl
    user = dbUsername
    password = dbPassword
    locations = ["filesystem:src/main/resources/db/migration"]
}
